/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface SupersedeH1 {
    'class': string;
  }
  interface SupersedeH2 {
    'class': string;
  }
  interface SupersedeP {
    'class': string;
  }
  interface SupersedeParagraph {
    'cls': string;
  }
  interface SupersedeSpan {
    'class': string;
  }
  interface VamA {
    'class': string;
    'href': string;
    'target': string;
  }
  interface VamH1Save {
    'class': string;
  }
  interface VamH2Save {
    'class': string;
  }
  interface VamH3 {
    'class': string;
  }
  interface VamH3Save {
    'class': string;
  }
  interface VamH4 {
    'class': string;
  }
  interface VamH4Save {
    'class': string;
  }
  interface VamPSave {
    'class': string;
  }
  interface VamSpanSave {
    'class': string;
  }
}

declare global {


  interface HTMLSupersedeH1Element extends Components.SupersedeH1, HTMLStencilElement {}
  var HTMLSupersedeH1Element: {
    prototype: HTMLSupersedeH1Element;
    new (): HTMLSupersedeH1Element;
  };

  interface HTMLSupersedeH2Element extends Components.SupersedeH2, HTMLStencilElement {}
  var HTMLSupersedeH2Element: {
    prototype: HTMLSupersedeH2Element;
    new (): HTMLSupersedeH2Element;
  };

  interface HTMLSupersedePElement extends Components.SupersedeP, HTMLStencilElement {}
  var HTMLSupersedePElement: {
    prototype: HTMLSupersedePElement;
    new (): HTMLSupersedePElement;
  };

  interface HTMLSupersedeParagraphElement extends Components.SupersedeParagraph, HTMLStencilElement {}
  var HTMLSupersedeParagraphElement: {
    prototype: HTMLSupersedeParagraphElement;
    new (): HTMLSupersedeParagraphElement;
  };

  interface HTMLSupersedeSpanElement extends Components.SupersedeSpan, HTMLStencilElement {}
  var HTMLSupersedeSpanElement: {
    prototype: HTMLSupersedeSpanElement;
    new (): HTMLSupersedeSpanElement;
  };

  interface HTMLVamAElement extends Components.VamA, HTMLStencilElement {}
  var HTMLVamAElement: {
    prototype: HTMLVamAElement;
    new (): HTMLVamAElement;
  };

  interface HTMLVamH1SaveElement extends Components.VamH1Save, HTMLStencilElement {}
  var HTMLVamH1SaveElement: {
    prototype: HTMLVamH1SaveElement;
    new (): HTMLVamH1SaveElement;
  };

  interface HTMLVamH2SaveElement extends Components.VamH2Save, HTMLStencilElement {}
  var HTMLVamH2SaveElement: {
    prototype: HTMLVamH2SaveElement;
    new (): HTMLVamH2SaveElement;
  };

  interface HTMLVamH3Element extends Components.VamH3, HTMLStencilElement {}
  var HTMLVamH3Element: {
    prototype: HTMLVamH3Element;
    new (): HTMLVamH3Element;
  };

  interface HTMLVamH3SaveElement extends Components.VamH3Save, HTMLStencilElement {}
  var HTMLVamH3SaveElement: {
    prototype: HTMLVamH3SaveElement;
    new (): HTMLVamH3SaveElement;
  };

  interface HTMLVamH4Element extends Components.VamH4, HTMLStencilElement {}
  var HTMLVamH4Element: {
    prototype: HTMLVamH4Element;
    new (): HTMLVamH4Element;
  };

  interface HTMLVamH4SaveElement extends Components.VamH4Save, HTMLStencilElement {}
  var HTMLVamH4SaveElement: {
    prototype: HTMLVamH4SaveElement;
    new (): HTMLVamH4SaveElement;
  };

  interface HTMLVamPSaveElement extends Components.VamPSave, HTMLStencilElement {}
  var HTMLVamPSaveElement: {
    prototype: HTMLVamPSaveElement;
    new (): HTMLVamPSaveElement;
  };

  interface HTMLVamSpanSaveElement extends Components.VamSpanSave, HTMLStencilElement {}
  var HTMLVamSpanSaveElement: {
    prototype: HTMLVamSpanSaveElement;
    new (): HTMLVamSpanSaveElement;
  };
  interface HTMLElementTagNameMap {
    'supersede-h1': HTMLSupersedeH1Element;
    'supersede-h2': HTMLSupersedeH2Element;
    'supersede-p': HTMLSupersedePElement;
    'supersede-paragraph': HTMLSupersedeParagraphElement;
    'supersede-span': HTMLSupersedeSpanElement;
    'vam-a': HTMLVamAElement;
    'vam-h1-save': HTMLVamH1SaveElement;
    'vam-h2-save': HTMLVamH2SaveElement;
    'vam-h3': HTMLVamH3Element;
    'vam-h3-save': HTMLVamH3SaveElement;
    'vam-h4': HTMLVamH4Element;
    'vam-h4-save': HTMLVamH4SaveElement;
    'vam-p-save': HTMLVamPSaveElement;
    'vam-span-save': HTMLVamSpanSaveElement;
  }
}

declare namespace LocalJSX {
  interface SupersedeH1 extends JSXBase.HTMLAttributes<HTMLSupersedeH1Element> {
    'class'?: string;
  }
  interface SupersedeH2 extends JSXBase.HTMLAttributes<HTMLSupersedeH2Element> {
    'class'?: string;
  }
  interface SupersedeP extends JSXBase.HTMLAttributes<HTMLSupersedePElement> {
    'class'?: string;
  }
  interface SupersedeParagraph extends JSXBase.HTMLAttributes<HTMLSupersedeParagraphElement> {
    'cls'?: string;
  }
  interface SupersedeSpan extends JSXBase.HTMLAttributes<HTMLSupersedeSpanElement> {
    'class'?: string;
  }
  interface VamA extends JSXBase.HTMLAttributes<HTMLVamAElement> {
    'class'?: string;
    'href'?: string;
    'target'?: string;
  }
  interface VamH1Save extends JSXBase.HTMLAttributes<HTMLVamH1SaveElement> {
    'class'?: string;
  }
  interface VamH2Save extends JSXBase.HTMLAttributes<HTMLVamH2SaveElement> {
    'class'?: string;
  }
  interface VamH3 extends JSXBase.HTMLAttributes<HTMLVamH3Element> {
    'class'?: string;
  }
  interface VamH3Save extends JSXBase.HTMLAttributes<HTMLVamH3SaveElement> {
    'class'?: string;
  }
  interface VamH4 extends JSXBase.HTMLAttributes<HTMLVamH4Element> {
    'class'?: string;
  }
  interface VamH4Save extends JSXBase.HTMLAttributes<HTMLVamH4SaveElement> {
    'class'?: string;
  }
  interface VamPSave extends JSXBase.HTMLAttributes<HTMLVamPSaveElement> {
    'class'?: string;
  }
  interface VamSpanSave extends JSXBase.HTMLAttributes<HTMLVamSpanSaveElement> {
    'class'?: string;
  }

  interface IntrinsicElements {
    'supersede-h1': SupersedeH1;
    'supersede-h2': SupersedeH2;
    'supersede-p': SupersedeP;
    'supersede-paragraph': SupersedeParagraph;
    'supersede-span': SupersedeSpan;
    'vam-a': VamA;
    'vam-h1-save': VamH1Save;
    'vam-h2-save': VamH2Save;
    'vam-h3': VamH3;
    'vam-h3-save': VamH3Save;
    'vam-h4': VamH4;
    'vam-h4-save': VamH4Save;
    'vam-p-save': VamPSave;
    'vam-span-save': VamSpanSave;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


